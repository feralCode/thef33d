{"version":3,"sources":["main.min.js","main.js"],"names":["drawFFT","values","fftContext","clearRect","canvasWidth","canvasHeight","barWidth","fft","size","i","len","length","x","y","fillStyle","fillRect","drawWaveform","waveContext","beginPath","lineJoin","lineWidth","strokeStyle","waveformGradient","moveTo","val","lineTo","stroke","drawMeter","level","meter","getLevel","gain","Tone","dbToGain","meterContext","meterGradient","sizeCanvases","$","width","height","canvas","createLinearGradient","addColorStop","loop","requestAnimationFrame","fftValues","getValue","waveformValues","waveform","FFT","Waveform","Meter","player","Player","url","fan","toMaster","toggleButtom","document","getElementById","addEventListener","volume","value","start","seek","id","appendTo","get","getContext","window","resize"],"mappings":"AAAA,YC+BA,SAASA,SAAQC,GACfC,WAAWC,UAAU,EAAG,EAAGC,YAAaC,aAExC,KAAK,GADDC,GAAWF,YAAcG,IAAIC,KACxBC,EAAI,EAAGC,EAAMT,EAAOU,OAAQF,EAAIC,EAAKD,IAAI,CAChD,GAAIG,GAAIR,aAAeK,EAAIC,GACvBG,EAAuB,IAAlBZ,EAAOQ,GAAK,GACrBP,YAAWY,UAAY,sBAAwBL,EAAEC,EAAM,IACvDR,WAAWa,SAASH,EAAGP,aAAeQ,EAAGP,EAAUD,eAQvD,QAASW,cAAaf,GAEpBgB,YAAYd,UAAU,EAAG,EAAGC,YAAaC,cACzCY,YAAYC,YACZD,YAAYE,SAAW,QACvBF,YAAYG,UAAY,EACxBH,YAAYI,YAAcC,iBAC1BL,YAAYM,OAAO,EAAItB,EAAO,GAAK,IAAOI,aAC1C,KAAK,GAAII,GAAI,EAAGC,EAAMT,EAAOU,OAAQF,EAAIC,EAAKD,IAAI,CAChD,GAAIe,IAAOvB,EAAOQ,GAAK,GAAK,EACxBG,EAAIR,aAAeK,EAAIC,GACvBG,EAAIW,EAAMnB,YACdY,aAAYQ,OAAOb,EAAGC,GAExBI,YAAYS,SAQd,QAASC,aACP,GAAMC,GAAQC,MAAMC,WACdC,EAAOC,KAAKC,SAASL,EAE3BM,cAAa/B,UAAU,EAAG,EAAGC,YAAaC,cAC1C6B,aAAapB,UAAYqB,cACzBD,aAAanB,SAAS,EAAG,EAAGX,YAAaC,cACzC6B,aAAapB,UAAY,UACzBoB,aAAanB,SAASX,YAAc2B,EAAM,EAAG3B,YAAaC,cAK5D,QAAS+B,gBACPhC,YAAciC,EAAE,QAAQC,QACxBjC,aAAegC,EAAE,QAAQE,SACzBtB,YAAYuB,OAAOF,MAAQlC,YAC3BF,WAAWsC,OAAOF,MAAQlC,YAC1Ba,YAAYuB,OAAOD,OAASlC,aAC5BH,WAAWsC,OAAOD,OAASlC,aAC3B6B,aAAaM,OAAOF,MAAQlC,YAC5B8B,aAAaM,OAAOD,OAASlC,aAE7B8B,cAAgBD,aAAaO,qBAAqB,EAAG,EAAGrC,YAAaC,cACrE8B,cAAcO,aAAa,EAAG,WAC9BP,cAAcO,aAAa,EAAG,WAE9BpB,iBAAmBL,YAAYwB,qBAAqB,EAAG,EAAGrC,YAAaC,cACvEiB,iBAAiBoB,aAAa,EAAG,WACjCpB,iBAAiBoB,aAAa,EAAG,WAInC,QAASC,QACPC,sBAAsBD,KAEtB,IAAIE,GAAYtC,IAAIuC,UACpB9C,SAAQ6C,EAER,IAAIE,GAAiBC,SAASF,UAC9B9B,cAAa+B,GAEbpB,YA5GF,GAAIpB,KAAM,GAAIyB,MAAKiB,IAAI,MAEnBD,SAAW,GAAIhB,MAAKkB,SAAS,MAG7BrB,MAAQ,GAAIG,MAAKmB,MAAM,GAIvBC,OAAS,GAAIpB,MAAKqB,QACpBC,IAAQ,0BACRX,MAAS,IAEVY,IAAIhD,IAAKyC,SAAUnB,OACnB2B,WAGKC,aAAeC,SAASC,eAAe,aAC7CF,cAAaG,iBAAiB,QAAU,WACtCR,OAAOS,OAAOC,UACdV,OAAOW,QACPX,OAAOY,KAAK,MAId,IAAI9D,YAAamC,EAAE,YACjB4B,GAAO,QACNC,SAAS,QAAQC,IAAI,GAAGC,WAAW,MAalCnD,YAAcoB,EAAE,YAClB4B,GAAO,aACNC,SAAS,QAAQC,IAAI,GAAGC,WAAW,MAClC9C,iBAmBAY,aAAeG,EAAE,YACnB4B,GAAO,QACNC,SAAS,QAAQC,IAAI,GAAGC,WAAW,MAClCjC,cAaA/B,YAAaC,YAmBjB+B,gBACAC,EAAEgC,QAAQC,OAAOlC,cAYjBO","file":"main.min.js","sourcesContent":["\"use strict\";\n//analyse the frequency/amplitude of the incoming signal\nvar fft = new Tone.FFT(1024);\n//get the waveform data for the audio\nvar waveform = new Tone.Waveform(1024);\n\n//create a level meter\nvar meter = new Tone.Meter(0.0);\n\n\n\nvar player = new Tone.Player({\n  \"url\": \"media/all_the_stars.mp3\",\n  \"loop\": true }).\n\nfan(fft, waveform, meter).\ntoMaster();\n\n\nvar toggleButtom = document.getElementById('btn_toggle');\ntoggleButtom.addEventListener('click', function () {\n  player.volume.value = -12;\n  player.start();\n  player.seek(130);\n});\n\n//drawing the FFT\nvar fftContext = $(\"<canvas>\", {\n  \"id\": \"fft\" }).\nappendTo(\"body\").get(0).getContext(\"2d\");\n\nfunction drawFFT(values) {\n  fftContext.clearRect(0, 0, canvasWidth, canvasHeight);\n  var barWidth = canvasWidth / fft.size;\n  for (var i = 0, len = values.length; i < len; i++) {\n    var x = canvasWidth * (i / len);\n    var y = (values[i] + 80) * 10;\n    fftContext.fillStyle = \"rgba(156, 39, 176, \" + i / len + \")\";\n    fftContext.fillRect(x, canvasHeight - y, barWidth, canvasHeight);\n  }\n}\n//the waveform data\nvar waveContext = $(\"<canvas>\", {\n  \"id\": \"waveform\" }).\nappendTo(\"body\").get(0).getContext(\"2d\");\nvar waveformGradient;\nfunction drawWaveform(values) {\n  //draw the waveform\n  waveContext.clearRect(0, 0, canvasWidth, canvasHeight);\n  waveContext.beginPath();\n  waveContext.lineJoin = \"round\";\n  waveContext.lineWidth = 6;\n  waveContext.strokeStyle = waveformGradient;\n  waveContext.moveTo(0, values[0] / 255 * canvasHeight);\n  for (var i = 1, len = values.length; i < len; i++) {\n    var val = (values[i] + 1) / 2;\n    var x = canvasWidth * (i / len);\n    var y = val * canvasHeight;\n    waveContext.lineTo(x, y);\n  }\n  waveContext.stroke();\n}\n\n//drawing the FFT\nvar meterContext = $(\"<canvas>\", {\n  \"id\": \"fft\" }).\nappendTo(\"body\").get(0).getContext(\"2d\");\nvar meterGradient;\nfunction drawMeter() {\n  var level = meter.getLevel();\n  var gain = Tone.dbToGain(level); //scale it between 0 - 1\n  // console.log(level);\n  meterContext.clearRect(0, 0, canvasWidth, canvasHeight);\n  meterContext.fillStyle = meterGradient;\n  meterContext.fillRect(0, 0, canvasWidth, canvasHeight);\n  meterContext.fillStyle = \"#212121\";\n  meterContext.fillRect(canvasWidth * gain, 0, canvasWidth, canvasHeight);\n}\n\n//size the canvases\nvar canvasWidth, canvasHeight;\nfunction sizeCanvases() {\n  canvasWidth = $(\"#fft\").width();\n  canvasHeight = $(\"#fft\").height();\n  waveContext.canvas.width = canvasWidth;\n  fftContext.canvas.width = canvasWidth;\n  waveContext.canvas.height = canvasHeight;\n  fftContext.canvas.height = canvasHeight;\n  meterContext.canvas.width = canvasWidth;\n  meterContext.canvas.height = canvasHeight;\n  //make the meter gradient\n  meterGradient = meterContext.createLinearGradient(0, 0, canvasWidth, canvasHeight);\n  meterGradient.addColorStop(0, \"#4A148C\");\n  meterGradient.addColorStop(1, \"#D500F9\");\n  //make the gradient\n  waveformGradient = waveContext.createLinearGradient(0, 0, canvasWidth, canvasHeight);\n  waveformGradient.addColorStop(0, \"#4A148C\");\n  waveformGradient.addColorStop(1, \"#D500F9\");\n}\nsizeCanvases();\n$(window).resize(sizeCanvases);\nfunction loop() {\n  requestAnimationFrame(loop);\n  //get the fft data and draw it\n  var fftValues = fft.getValue();\n  drawFFT(fftValues);\n  //get the waveform values and draw it\n  var waveformValues = waveform.getValue();\n  drawWaveform(waveformValues);\n\n  drawMeter();\n}\nloop();\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","\n//analyse the frequency/amplitude of the incoming signal\nvar fft = new Tone.FFT(1024);\n//get the waveform data for the audio\nvar waveform = new Tone.Waveform(1024);\n\n//create a level meter\nvar meter = new Tone.Meter(0.0);\n\n\n\nvar player = new Tone.Player({\n  \"url\" : \"media/all_the_stars.mp3\",\n  \"loop\" : true\n})\n.fan(fft, waveform, meter)\n.toMaster();\n\n\nconst toggleButtom = document.getElementById('btn_toggle');\ntoggleButtom.addEventListener('click',  () => {\n  player.volume.value = -12;\n  player.start();\n  player.seek(130);\n});\n\n//drawing the FFT\nvar fftContext = $(\"<canvas>\",{\n  \"id\" : \"fft\"\n}).appendTo(\"body\").get(0).getContext(\"2d\");\n\nfunction drawFFT(values){\n  fftContext.clearRect(0, 0, canvasWidth, canvasHeight);\n  var barWidth = canvasWidth / fft.size;\n  for (var i = 0, len = values.length; i < len; i++){\n    var x = canvasWidth * (i / len);\n    var y = (values[i] + 80) * 10;\n    fftContext.fillStyle = \"rgba(156, 39, 176, \" + i/len + \")\";\n    fftContext.fillRect(x, canvasHeight - y, barWidth, canvasHeight);\n  }\n}\n//the waveform data\nvar waveContext = $(\"<canvas>\", {\n  \"id\" : \"waveform\"\n}).appendTo(\"body\").get(0).getContext(\"2d\");\nvar waveformGradient;\nfunction drawWaveform(values){\n  //draw the waveform\n  waveContext.clearRect(0, 0, canvasWidth, canvasHeight);\n  waveContext.beginPath();\n  waveContext.lineJoin = \"round\";\n  waveContext.lineWidth = 6;\n  waveContext.strokeStyle = waveformGradient;\n  waveContext.moveTo(0, (values[0] / 255) * canvasHeight);\n  for (var i = 1, len = values.length; i < len; i++){\n    var val = (values[i] + 1) / 2;\n    var x = canvasWidth * (i / len);\n    var y = val * canvasHeight;\n    waveContext.lineTo(x, y);\n  }\n  waveContext.stroke();\n}\n\n//drawing the FFT\nvar meterContext = $(\"<canvas>\",{\n  \"id\" : \"fft\"\n}).appendTo(\"body\").get(0).getContext(\"2d\");\nvar meterGradient;\nfunction drawMeter(){\n  const level = meter.getLevel();\n  const gain = Tone.dbToGain(level); //scale it between 0 - 1\n  // console.log(level);\n  meterContext.clearRect(0, 0, canvasWidth, canvasHeight);\n  meterContext.fillStyle = meterGradient;\n  meterContext.fillRect(0, 0, canvasWidth, canvasHeight);\n  meterContext.fillStyle = \"#212121\";\n  meterContext.fillRect(canvasWidth * gain, 0, canvasWidth, canvasHeight);\n}\n\n//size the canvases\nvar canvasWidth, canvasHeight;\nfunction sizeCanvases(){\n  canvasWidth = $(\"#fft\").width();\n  canvasHeight = $(\"#fft\").height();\n  waveContext.canvas.width = canvasWidth;\n  fftContext.canvas.width = canvasWidth;\n  waveContext.canvas.height = canvasHeight;\n  fftContext.canvas.height = canvasHeight;\n  meterContext.canvas.width = canvasWidth;\n  meterContext.canvas.height = canvasHeight;\n  //make the meter gradient\n  meterGradient = meterContext.createLinearGradient(0, 0, canvasWidth, canvasHeight);\n  meterGradient.addColorStop(0, \"#4A148C\");\n  meterGradient.addColorStop(1, \"#D500F9\");\n  //make the gradient\n  waveformGradient = waveContext.createLinearGradient(0, 0, canvasWidth, canvasHeight);\n  waveformGradient.addColorStop(0, \"#4A148C\");\n  waveformGradient.addColorStop(1, \"#D500F9\");\n}\nsizeCanvases();\n$(window).resize(sizeCanvases);\nfunction loop(){\n  requestAnimationFrame(loop);\n  //get the fft data and draw it\n  var fftValues = fft.getValue();\n  drawFFT(fftValues);\n  //get the waveform values and draw it\n  var waveformValues = waveform.getValue();\n  drawWaveform(waveformValues);\n\n  drawMeter();\n}\nloop();\n"]}